# -*- coding: utf-8 -*-
"""Activation_Func .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NK2VnulSj5n8OB4OcskVpO2obfHM3MBz

# Q1. What is an activation function in the context of artificial neural networks?

In the context of ANN, an activation function is a mathematical function applied
to a nodes input to produce an output signal.It determines whether
a neuron should be activated or not.This is crucial for the network to learn complex
patterns,perfrom non-linear transformations,and model data relationships.

Key Roles of Activation Function:

1) Non-Linearity
2) Signal Modulation
3) Gradient Propogation

Common Activation Functions:

1) Sigmoid
2) Tanh (Hyperbolic Tangent)
3) ReLu(Rectified Linear Unit)
4) Leaky ReLu
5) Softmax Activation FUnction

# Q2. What are some common types of activation functions used in neural networks?

Sigmoid
Tanh (Hyperbolic Tangent)
# ReLu(Rectified Linear Unit)
Leaky ReLu

Softmax Activation FUnction

# Q3. How do activation functions affect the training process and performance of a neural network?

Here are several ways they influence these aspects:
    1) Non Linearity:
     Activation function introduce non-linearity to the
    network,allowing it to model complex relationships
    in the data.Without,non-linear function , a nueral
    network would simply behave behave like a linear model.

    2) Gradient Progogation :
During training ,the gradients and calculated and progogated back through the network to update the weights.A.F affects how gradients flow through the network. Functions like ReLu and its variants help mitigate the vanishing gradient problem,where gradient become too small for effective learning in deep networks.


    3) Sparsity :
ReLu and its variants introduce sparsity to the network by outputting zero to the negative input values.This sparsity can lead to more efficient computations and help mitigate overfitting.

Conclusion:
   Choosing the  right activation function is critical      for optimizing the training process and achieveing      the best performance.

# Q4. How does the sigmoid activation function work? What are its advantages and disadvantages?

# The sigmoid activation function is a mathematical function used in neural networks to introduce non-linearity into the model. It is defined by the formula:

# ‚ÄúœÉ(x)=1/1+e^‚àíx‚Äã‚Äù

Input Range : The input x can raange from -inf to +inf.
Output Range : It lies between 0 and 1.
S-Shape Curve : The function has an S shaped curve,
                 also known as logistic curve.
Saturation : For very high positive inputs,the output
#             approaches 1 and for very low it app. *0*

ADVANTAGES :
1) Probabilistic Interpretation -> Since the output lies
in the range (0,1) it can be interpreted as probability.
This makes this fucntion useful in binary classification
problems.
2) Smooth Gradient -> The function is smmoth and diffe-
entiable,which makes it better for gradient-based
optimization methods.
3) Monotonic -> This function is monotonic ,which means
#   it consistently increases,making it easier to understand
how changes in input affect the output.

Disadvantages:
1)Vanishing Gradient Problem: When the input ùë• is very large
or very small, the gradient (derivative) of the sigmoid
function becomes very small, leading to very small updates
to the weights during backpropagation. This can slow down
the training process significantly.
2)Not Zero-Centered: The output range is (0, 1), which means
the activations are always positive. This can cause
the gradients to have a consistent direction during
weight updates, leading to inefficient training.
3) COmputationally Expensive

# Q5.What is the rectified linear unit (ReLU) activation function? How does it differ from the sigmoid function?

ReLu activation function is defined as
ReLu(x) = max(0,x)

Differences from the sigmoid function ->
 1) Relu outputs the input directly if it is positive,
    otherwise it outputs zero  whereas sigmoid outputs
    between 0 and 1 using formula 1/1+e^-x
2) Output range of  ReLu is [0, infinity]
   whereas that of Sigmoid is (0,1)
3) ReLu is computationally simpler and faster whereas
   Sigmoid is more computationally intensive due to
    exponential fucntion
4) ReLu is not zero-centered but Sigmoid is zero-centered meaning always positive

In summary, ReLU is preferred for deep networks due to its simplicity, efficiency, and ability to mitigate the vanishing gradient problem, whereas the sigmoid function is useful for binary classification but suffers from vanishing gradients and slower training.

# Q6. What are the benefits of using the ReLU activation function over the sigmoid function?

1) Mitigates Vanishing gradient Problem ->
ReLu's gradient is either 0 or 1 ,avoiding very small
gradients that slow training.
2) Computationally Efficient ->
It is simpler and faster to compute.
3) Sparsity : Outputs zero for negative inputs ,
0   improving efficiency and reducing model complexity.
4) Faster Convergence -> It has quick training and
convergence.

# Q7. Explain the concept of "leaky ReLU" and how it addresses the vanishing gradient problem.

Leaky ReLu is a variant of the rectified linear unit
activation function that allows a small non-zero
gradient when the input is negative.

# Leaky ReLu(x) = max( 0.01x,x)

Leaky ReLU avoids zero gradients for negative inputs, unlike traditional ReLU, which could result in dead neurons. This small gradient helps maintain a flow of information and avoids complete inactivation of neurons, thereby mitigating the vanishing gradient problem commonly seen in deep neural networks.

# Q8. What is the purpose of the softmax activation function? When is it commonly used?

The purpose of the softmax activation function is to convert logits into probabilities, making the output vector's components sum to 1.

It is commonly used in the output layer of neural networks for multi-class classification tasks.

# Q9. What is the hyperbolic tangent (tanh) activation function? How does it compare to the sigmoid function?

The hyperbolic tangent (tanh) activation function is defined as:

# ‚Äútanh(x)=e^x - e^‚àíx  / e^x+e‚àíx‚Äã‚Äù

Comparison to the Sigmoid Function:
***Range**: Tanh outputs values between -1 and 1, whereas sigmoid outputs values between 0 and 1.

**Zero-Centered**: Tanh is zero-centered (mean is zero), while sigmoid is not.
**Gradient**: Tanh has stronger gradients than sigmoid,
"""

